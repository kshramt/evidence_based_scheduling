module(
    name = "evidence_based_scheduling",
    version = "1.0.0",
    compatibility_level = 1,
)

bazel_dep(name = "aspect_bazel_lib", version = "1.39.0")
bazel_dep(name = "aspect_rules_js", version = "1.34.1")
bazel_dep(name = "aspect_rules_lint", version = "0.7.0")
bazel_dep(name = "aspect_rules_py", version = "0.5.0")
bazel_dep(name = "aspect_rules_ts", version = "2.1.0")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "gazelle", version = "0.34.0", repo_name = "bazel_gazelle")
bazel_dep(name = "platforms", version = "0.0.8")
bazel_dep(name = "rules_nodejs", version = "6.0.2")
bazel_dep(name = "rules_oci", version = "1.4.3")
bazel_dep(name = "rules_pkg", version = "0.9.1")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.27.1")
bazel_dep(name = "rules_python", dev_dependency = True, version = "0.27.1")

#
# oci
#

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "oci_envoy_orig",
    digest = "sha256:8d93b24b167364f769ac9dac11ddc48631c7f9fb54213794acfdd5ebf5bbafdd",
    # tag = "v1.28.0",
    image = "index.docker.io/envoyproxy/envoy",
)
use_repo(oci, "oci_envoy_orig")

oci.pull(
    name = "oci_distroless_cc_orig",
    digest = "sha256:a9056d2232d16e3772bec3ef36b93a5ea9ef6ad4b4ed407631e534b85832cf40",
    image = "gcr.io/distroless/cc-debian12",
    platforms = ["linux/amd64"],
)
use_repo(oci, "oci_distroless_cc_orig")

oci.pull(
    name = "oci_nginx_orig",
    digest = "sha256:d196915ddcdba9c28059bf111b2beeeb39d2cd0f8353a1ff4bfbf4b6189f3b0c",
    image = "nginx",
)
use_repo(oci, "oci_nginx_orig")

#
# node
#

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "20.8.0")
# node.toolchain()
#################################

#
# npm
#

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

npm.npm_translate_lock(
    name = "npm",
    npmrc = ".npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
    pnpm_version = "8.12.1",
)

use_repo(npm, "npm")

#
# pnpm
#

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)
use_repo(pnpm, "pnpm")

#
# Python
#

_PYTHON_VERSION = "3.11.6"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = _PYTHON_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = _PYTHON_VERSION,
    requirements_linux = "//:requirements_linux.txt",
    requirements_lock = "//:requirements_linux.txt",
)

use_repo(pip, "pip")
