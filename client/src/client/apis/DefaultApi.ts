/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HBEmptyHeaderListApiSchemasPatch,
    HBEmptyHeaderListApiSchemasPatchFromJSON,
    HBEmptyHeaderListApiSchemasPatchToJSON,
    HBEmptyHeaderListApiSchemasUser,
    HBEmptyHeaderListApiSchemasUserFromJSON,
    HBEmptyHeaderListApiSchemasUserToJSON,
    HBEmptyHeaderPatch,
    HBEmptyHeaderPatchFromJSON,
    HBEmptyHeaderPatchToJSON,
    HBEmptyHeaderPatchCreate,
    HBEmptyHeaderPatchCreateFromJSON,
    HBEmptyHeaderPatchCreateToJSON,
    HBEmptyHeaderUser,
    HBEmptyHeaderUserFromJSON,
    HBEmptyHeaderUserToJSON,
    HBEmptyHeaderUserCreate,
    HBEmptyHeaderUserCreateFromJSON,
    HBEmptyHeaderUserCreateToJSON,
    HBEtagHeaderData,
    HBEtagHeaderDataFromJSON,
    HBEtagHeaderDataToJSON,
    HBEtagPathHeaderData,
    HBEtagPathHeaderDataFromJSON,
    HBEtagPathHeaderDataToJSON,
    HBEtagPathHeaderIntValue,
    HBEtagPathHeaderIntValueFromJSON,
    HBEtagPathHeaderIntValueToJSON,
    HBPathHeaderPatch,
    HBPathHeaderPatchFromJSON,
    HBPathHeaderPatchToJSON,
    HBPathHeaderUser,
    HBPathHeaderUserFromJSON,
    HBPathHeaderUserToJSON,
    HBUnionIfMatchHeaderEmptyHeaderIntValue,
    HBUnionIfMatchHeaderEmptyHeaderIntValueFromJSON,
    HBUnionIfMatchHeaderEmptyHeaderIntValueToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface CreatePatchPatchesPostRequest {
    hBEmptyHeaderPatchCreate: HBEmptyHeaderPatchCreate;
}

export interface CreateUserUsersPostRequest {
    hBEmptyHeaderUserCreate: HBEmptyHeaderUserCreate;
}

export interface GetDataDataPatchIdGetRequest {
    patchId: number;
}

export interface GetDataOfUserUsersUserIdDataGetRequest {
    userId: number;
}

export interface GetIdOfDataOfUserUsersUserIdDataIdGetRequest {
    userId: number;
}

export interface GetPatchPatchesPatchIdGetRequest {
    patchId: number;
}

export interface GetPatchesPatchesGetRequest {
    offset?: number;
    limit?: number;
}

export interface GetUserUsersUserIdGetRequest {
    userId: number;
}

export interface GetUsersUsersGetRequest {
    offset?: number;
    limit?: number;
}

export interface PutIdOfDataOfUserUsersUserIdDataIdPutRequest {
    userId: number;
    hBUnionIfMatchHeaderEmptyHeaderIntValue: HBUnionIfMatchHeaderEmptyHeaderIntValue;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Patch
     */
    async createPatchPatchesPostRaw(requestParameters: CreatePatchPatchesPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBPathHeaderPatch>> {
        if (requestParameters.hBEmptyHeaderPatchCreate === null || requestParameters.hBEmptyHeaderPatchCreate === undefined) {
            throw new runtime.RequiredError('hBEmptyHeaderPatchCreate','Required parameter requestParameters.hBEmptyHeaderPatchCreate was null or undefined when calling createPatchPatchesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patches`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HBEmptyHeaderPatchCreateToJSON(requestParameters.hBEmptyHeaderPatchCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBPathHeaderPatchFromJSON(jsonValue));
    }

    /**
     * Create Patch
     */
    async createPatchPatchesPost(requestParameters: CreatePatchPatchesPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBPathHeaderPatch> {
        const response = await this.createPatchPatchesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create User
     */
    async createUserUsersPostRaw(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBPathHeaderUser>> {
        if (requestParameters.hBEmptyHeaderUserCreate === null || requestParameters.hBEmptyHeaderUserCreate === undefined) {
            throw new runtime.RequiredError('hBEmptyHeaderUserCreate','Required parameter requestParameters.hBEmptyHeaderUserCreate was null or undefined when calling createUserUsersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HBEmptyHeaderUserCreateToJSON(requestParameters.hBEmptyHeaderUserCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBPathHeaderUserFromJSON(jsonValue));
    }

    /**
     * Create User
     */
    async createUserUsersPost(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBPathHeaderUser> {
        const response = await this.createUserUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Data
     */
    async getDataDataPatchIdGetRaw(requestParameters: GetDataDataPatchIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBEtagHeaderData>> {
        if (requestParameters.patchId === null || requestParameters.patchId === undefined) {
            throw new runtime.RequiredError('patchId','Required parameter requestParameters.patchId was null or undefined when calling getDataDataPatchIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/data/{patch_id}`.replace(`{${"patch_id"}}`, encodeURIComponent(String(requestParameters.patchId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBEtagHeaderDataFromJSON(jsonValue));
    }

    /**
     * Get Data
     */
    async getDataDataPatchIdGet(requestParameters: GetDataDataPatchIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBEtagHeaderData> {
        const response = await this.getDataDataPatchIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Data Of User
     */
    async getDataOfUserUsersUserIdDataGetRaw(requestParameters: GetDataOfUserUsersUserIdDataGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBEtagPathHeaderData>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getDataOfUserUsersUserIdDataGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}/data`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBEtagPathHeaderDataFromJSON(jsonValue));
    }

    /**
     * Get Data Of User
     */
    async getDataOfUserUsersUserIdDataGet(requestParameters: GetDataOfUserUsersUserIdDataGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBEtagPathHeaderData> {
        const response = await this.getDataOfUserUsersUserIdDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Id Of Data Of User
     */
    async getIdOfDataOfUserUsersUserIdDataIdGetRaw(requestParameters: GetIdOfDataOfUserUsersUserIdDataIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBEtagPathHeaderIntValue>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getIdOfDataOfUserUsersUserIdDataIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}/data/id`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBEtagPathHeaderIntValueFromJSON(jsonValue));
    }

    /**
     * Get Id Of Data Of User
     */
    async getIdOfDataOfUserUsersUserIdDataIdGet(requestParameters: GetIdOfDataOfUserUsersUserIdDataIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBEtagPathHeaderIntValue> {
        const response = await this.getIdOfDataOfUserUsersUserIdDataIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Patch
     */
    async getPatchPatchesPatchIdGetRaw(requestParameters: GetPatchPatchesPatchIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBEmptyHeaderPatch>> {
        if (requestParameters.patchId === null || requestParameters.patchId === undefined) {
            throw new runtime.RequiredError('patchId','Required parameter requestParameters.patchId was null or undefined when calling getPatchPatchesPatchIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patches/{patch_id}`.replace(`{${"patch_id"}}`, encodeURIComponent(String(requestParameters.patchId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBEmptyHeaderPatchFromJSON(jsonValue));
    }

    /**
     * Get Patch
     */
    async getPatchPatchesPatchIdGet(requestParameters: GetPatchPatchesPatchIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBEmptyHeaderPatch> {
        const response = await this.getPatchPatchesPatchIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Patches
     */
    async getPatchesPatchesGetRaw(requestParameters: GetPatchesPatchesGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBEmptyHeaderListApiSchemasPatch>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBEmptyHeaderListApiSchemasPatchFromJSON(jsonValue));
    }

    /**
     * Get Patches
     */
    async getPatchesPatchesGet(requestParameters: GetPatchesPatchesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBEmptyHeaderListApiSchemasPatch> {
        const response = await this.getPatchesPatchesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get User
     */
    async getUserUsersUserIdGetRaw(requestParameters: GetUserUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBEmptyHeaderUser>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserUsersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBEmptyHeaderUserFromJSON(jsonValue));
    }

    /**
     * Get User
     */
    async getUserUsersUserIdGet(requestParameters: GetUserUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBEmptyHeaderUser> {
        const response = await this.getUserUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Users
     */
    async getUsersUsersGetRaw(requestParameters: GetUsersUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBEmptyHeaderListApiSchemasUser>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBEmptyHeaderListApiSchemasUserFromJSON(jsonValue));
    }

    /**
     * Get Users
     */
    async getUsersUsersGet(requestParameters: GetUsersUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBEmptyHeaderListApiSchemasUser> {
        const response = await this.getUsersUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put Id Of Data Of User
     */
    async putIdOfDataOfUserUsersUserIdDataIdPutRaw(requestParameters: PutIdOfDataOfUserUsersUserIdDataIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<HBEtagPathHeaderIntValue>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling putIdOfDataOfUserUsersUserIdDataIdPut.');
        }

        if (requestParameters.hBUnionIfMatchHeaderEmptyHeaderIntValue === null || requestParameters.hBUnionIfMatchHeaderEmptyHeaderIntValue === undefined) {
            throw new runtime.RequiredError('hBUnionIfMatchHeaderEmptyHeaderIntValue','Required parameter requestParameters.hBUnionIfMatchHeaderEmptyHeaderIntValue was null or undefined when calling putIdOfDataOfUserUsersUserIdDataIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{user_id}/data/id`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HBUnionIfMatchHeaderEmptyHeaderIntValueToJSON(requestParameters.hBUnionIfMatchHeaderEmptyHeaderIntValue),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HBEtagPathHeaderIntValueFromJSON(jsonValue));
    }

    /**
     * Put Id Of Data Of User
     */
    async putIdOfDataOfUserUsersUserIdDataIdPut(requestParameters: PutIdOfDataOfUserUsersUserIdDataIdPutRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<HBEtagPathHeaderIntValue> {
        const response = await this.putIdOfDataOfUserUsersUserIdDataIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
