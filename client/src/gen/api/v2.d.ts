/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/sys/health": {
    /** Check the health of the system. */
    get: {
      responses: {
        /** @description System is healthy. */
        200: {
          content: {
            "application/json": components["schemas"]["SysHealthResponse"];
          };
        };
      };
    };
  };
  "/fake_idp/users": {
    /** Create a user for the fake ID provider. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["FakeIdpCreateUserRequest"];
        };
      };
      responses: {
        /** @description User created. */
        201: {
          content: {
            "application/json": components["schemas"]["FakeIdpCreateUserResponse"];
          };
        };
      };
    };
  };
  "/fake_idp/login/id_token": {
    /** Create an id token for the fake ID provider. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["FakeIdpCreateUserRequest"];
        };
      };
      responses: {
        /** @description ID token created. */
        200: {
          content: {
            "application/json": components["schemas"]["FakeIdpCreateIdTokenResponse"];
          };
        };
      };
    };
  };
  "/users": {
    /** Create a user with the given ID token in the authorization Bearer header. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateUserRequest"];
        };
      };
      responses: {
        /** @description User created. */
        201: {
          content: {
            "application/json": components["schemas"]["CreateUserResponse"];
          };
        };
      };
    };
  };
  "/users/{user_id}/clients": {
    /** Create a client with the given ID token in the authorization Bearer header. */
    post: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateClientRequest"];
        };
      };
      responses: {
        /** @description Client created. */
        201: {
          content: {
            "application/json": components["schemas"]["CreateClientResponse"];
          };
        };
      };
    };
  };
  "/users/{user_id}/patches:batch": {
    /** Push un-synched patches to the remote. */
    post: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreatePatchesRequest"];
        };
      };
      responses: {
        /** @description Patches pushed. */
        201: {
          content: {
            "application/json": components["schemas"]["CreatePatchesResponse"];
          };
        };
      };
    };
  };
  "/users/{user_id}/clients/{client_id}/pending_patches": {
    /** Retrieve un-synched patches from the remote. */
    get: {
      parameters: {
        query: {
          limit: number;
        };
        path: {
          user_id: string;
          client_id: number;
        };
      };
      responses: {
        /** @description Patches retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["GetPendingPatchesResponse"];
          };
        };
      };
    };
  };
  "/users/{user_id}/clients/{client_id}/pending_patches:batch": {
    /** Delete remote patches that have been downloaded locally. */
    delete: {
      parameters: {
        path: {
          user_id: string;
          client_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["DeletePendingPatchesRequest"];
        };
      };
      responses: {
        /** @description Patches deleted. */
        200: {
          content: {
            "application/json": components["schemas"]["DeletePendingPatchesResponse"];
          };
        };
      };
    };
  };
  "/users/{user_id}/head": {
    /** Get the main branch. */
    get: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      responses: {
        /** @description Head retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["GetHeadResponse"];
          };
        };
      };
    };
    /** Set the main branch. */
    put: {
      parameters: {
        path: {
          user_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateHeadRequest"];
        };
      };
      responses: {
        /** @description Head has been set. */
        200: {
          content: {
            "application/json": components["schemas"]["UpdateHeadResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    IdToken: {
      user_id: string;
    };
    Patch: {
      patch_key: components["schemas"]["PatchKey"];
      parent_patch_key: components["schemas"]["PatchKey"];
      /** Format: date-time */
      created_at: string;
      /** @description Any JSON value. */
      patch: unknown;
    };
    PatchKey: {
      /** Format: int64 */
      client_id: number;
      /** Format: int64 */
      session_id: number;
      /** Format: int64 */
      patch_id: number;
    };
    SysHealthResponse: {
      status: string;
    };
    FakeIdpCreateUserRequest: {
      name: string;
    };
    FakeIdpCreateUserResponse: {
      token: components["schemas"]["IdToken"];
    };
    FakeIdpCreateIdTokenRequest: {
      name: string;
    };
    FakeIdpCreateIdTokenResponse: {
      token: components["schemas"]["IdToken"];
    };
    CreateUserRequest: Record<string, never>;
    CreateUserResponse: Record<string, never>;
    CreateClientRequest: {
      name: string;
    };
    CreateClientResponse: {
      /** Format: int64 */
      client_id: number;
    };
    GetPendingPatchesResponse: {
      patches: components["schemas"]["Patch"][];
    };
    DeletePendingPatchesRequest: {
      patch_keys: components["schemas"]["PatchKey"][];
    };
    DeletePendingPatchesResponse: Record<string, never>;
    CreatePatchesRequest: {
      patches: components["schemas"]["Patch"][];
    };
    CreatePatchesResponse: Record<string, never>;
    GetHeadResponse: {
      /** Format: int64 */
      client_id: number;
      /** Format: int64 */
      session_id: number;
      /** Format: int64 */
      patch_id: number;
      /** Format: date-time */
      created_at: string;
      name: string;
    };
    UpdateHeadRequest: {
      patch_key: components["schemas"]["PatchKey"];
      header_if_match?: components["schemas"]["PatchKey"];
    };
    UpdateHeadResponse: {
      updated: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
