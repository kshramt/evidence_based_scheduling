syntax = "proto3";

package api.v1;

option go_package = "github.com/kshramt/evidence_based_scheduling/gen/api/v1;apiv1";

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

service ApiService {
  // Create a user for the fake ID provider.
  rpc FakeIdpCreateUser(FakeIdpCreateUserRequest) returns (FakeIdpCreateUserResponse);

  // Get an ID token from the ID provider.
  rpc FakeIdpGetIdToken(FakeIdpGetIdTokenRequest) returns (FakeIdpGetIdTokenResponse);

  // Create a user by the given `user_id`.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);

  // As we know the user ID, we can check a client ID is assigned in the browser.
  // If none exists, create a client and use the clietn ID to popurate necessary DBs.
  rpc CreateClient(CreateClientRequest) returns (CreateClientResponse);

  // Retrieve un-synched patches from the remote.
  rpc GetPendingPatches(GetPendingPatchesRequest) returns (GetPendingPatchesResponse);

  // Delete remote patches that have been downloaded locally.
  rpc DeletePendingPatches(DeletePendingPatchesRequest) returns (DeletePendingPatchesResponse);

  // Push un-synched patches to the remote.
  rpc CreatePatches(CreatePatchesRequest) returns (CreatePatchesResponse);

  // Get the main branch.
  rpc GetHead(GetHeadRequest) returns (GetHeadResponse);

  // Update the main branch if not modified.
  rpc UpdateHeadIfNotModified(UpdateHeadIfNotModifiedRequest) returns (UpdateHeadIfNotModifiedResponse);

  // Update the main branch.
  rpc UpdateHead(UpdateHeadRequest) returns (UpdateHeadResponse);
}

message Token {
  optional string user_id = 1 [(buf.validate.field).required = true];
}

message Patch {
  optional int64 client_id = 1 [(buf.validate.field).required = true];
  optional int64 session_id = 2 [(buf.validate.field).required = true];
  optional int64 patch_id = 3 [(buf.validate.field).required = true];
  optional int64 parent_client_id = 4 [(buf.validate.field).required = true];
  optional int64 parent_session_id = 5 [(buf.validate.field).required = true];
  optional int64 parent_patch_id = 6 [(buf.validate.field).required = true];
  optional google.protobuf.Timestamp created_at = 7 [(buf.validate.field).required = true];
  optional string patch = 8 [(buf.validate.field).required = true];
}

message FakeIdpCreateUserRequest {
  optional string name = 1 [(buf.validate.field).required = true];
}

message FakeIdpCreateUserResponse {
  optional Token token = 1 [(buf.validate.field).required = true];
}

message FakeIdpGetIdTokenRequest {
  optional string name = 1 [(buf.validate.field).required = true];
}

message FakeIdpGetIdTokenResponse {
  optional Token token = 1 [(buf.validate.field).required = true];
}

message CreateUserRequest {
  // `user_id` will be provided by an ID provider.
  optional string user_id = 1 [(buf.validate.field).required = true];
}
message CreateUserResponse {}

message CreateClientRequest {
  optional string name = 1 [(buf.validate.field).required = true];
}
message CreateClientResponse {
  optional int64 client_id = 1 [(buf.validate.field).required = true];
}

message GetPendingPatchesRequest {
  optional int64 client_id = 1 [(buf.validate.field).required = true];
  optional int64 size = 2 [(buf.validate.field).required = true];
}
message GetPendingPatchesResponse {
  repeated Patch patches = 1;
}

message DeletePendingPatchesRequest {
  message Patch {
    optional int64 client_id = 1 [(buf.validate.field).required = true];
    optional int64 session_id = 3 [(buf.validate.field).required = true];
    optional int64 patch_id = 4 [(buf.validate.field).required = true];
  }
  optional int64 client_id = 1 [(buf.validate.field).required = true];
  repeated Patch patches = 2;
}
message DeletePendingPatchesResponse {}

message CreatePatchesRequest {
  repeated Patch patches = 2;
}
message CreatePatchesResponse {}

message GetHeadRequest {
}
message GetHeadResponse {
  optional int64 client_id = 1 [(buf.validate.field).required = true];
  optional int64 session_id = 2 [(buf.validate.field).required = true];
  optional int64 patch_id = 3 [(buf.validate.field).required = true];
  optional google.protobuf.Timestamp created_at = 4 [(buf.validate.field).required = true];
  optional string name = 5 [(buf.validate.field).required = true];
}

message UpdateHeadIfNotModifiedRequest {
  optional int64 client_id = 1 [(buf.validate.field).required = true];
  optional int64 session_id = 2 [(buf.validate.field).required = true];
  optional int64 patch_id = 3 [(buf.validate.field).required = true];
  optional int64 prev_client_id = 4 [(buf.validate.field).required = true];
  optional int64 prev_session_id = 5 [(buf.validate.field).required = true];
  optional int64 prev_patch_id = 6 [(buf.validate.field).required = true];
}

message UpdateHeadIfNotModifiedResponse {
  optional bool updated = 1 [(buf.validate.field).required = true];
}

message UpdateHeadRequest {
  optional int64 client_id = 1 [(buf.validate.field).required = true];
  optional int64 session_id = 2 [(buf.validate.field).required = true];
  optional int64 patch_id = 3 [(buf.validate.field).required = true];
}

message UpdateHeadResponse {}
